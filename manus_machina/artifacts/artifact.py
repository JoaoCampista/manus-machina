"""
Artifact System

Represents structured content generated by agents that can be:
- Visualized separately
- Downloaded
- Referenced in future conversations
- Versioned

Inspired by Google ADK's artifact model.
"""

from datetime import datetime
from enum import Enum
from typing import Any, Dict, Optional
from uuid import UUID, uuid4
from pydantic import BaseModel, Field


class ArtifactType(str, Enum):
    """Types of artifacts that can be generated"""
    
    # Code
    CODE_PYTHON = "code/python"
    CODE_JAVASCRIPT = "code/javascript"
    CODE_TYPESCRIPT = "code/typescript"
    CODE_JAVA = "code/java"
    CODE_GO = "code/go"
    CODE_RUST = "code/rust"
    CODE_SQL = "code/sql"
    CODE_HTML = "code/html"
    CODE_CSS = "code/css"
    CODE_SHELL = "code/shell"
    
    # Documents
    DOCUMENT_MARKDOWN = "document/markdown"
    DOCUMENT_HTML = "document/html"
    DOCUMENT_TEXT = "document/text"
    DOCUMENT_JSON = "document/json"
    DOCUMENT_YAML = "document/yaml"
    DOCUMENT_XML = "document/xml"
    
    # Data
    DATA_CSV = "data/csv"
    DATA_JSON = "data/json"
    DATA_PARQUET = "data/parquet"
    DATA_EXCEL = "data/excel"
    
    # Visualizations
    VIZ_CHART = "viz/chart"
    VIZ_DIAGRAM = "viz/diagram"
    VIZ_MERMAID = "viz/mermaid"
    VIZ_PLOTLY = "viz/plotly"
    
    # Images
    IMAGE_PNG = "image/png"
    IMAGE_JPEG = "image/jpeg"
    IMAGE_SVG = "image/svg"
    
    # Other
    OTHER = "other"


class Artifact(BaseModel):
    """
    Artifact represents structured content generated by an agent.
    
    Artifacts are first-class citizens in the framework, allowing:
    - Separate visualization from conversation
    - Download and export
    - Versioning and history
    - Reference in future conversations
    """
    
    # Identity
    id: UUID = Field(default_factory=uuid4)
    
    # Type and metadata
    type: ArtifactType
    title: str
    description: Optional[str] = None
    
    # Content
    content: str  # Main content (code, markdown, data, etc.)
    metadata: Dict[str, Any] = Field(default_factory=dict)
    
    # Versioning
    version: int = 1
    parent_id: Optional[UUID] = None  # For versioned artifacts
    
    # Context
    session_id: UUID
    agent_name: Optional[str] = None
    
    # Timestamps
    created_at: datetime = Field(default_factory=datetime.utcnow)
    
    # Tags for organization
    tags: list[str] = Field(default_factory=list)
    
    class Config:
        arbitrary_types_allowed = True
    
    def create_version(self, new_content: str, description: Optional[str] = None) -> "Artifact":
        """
        Create a new version of this artifact.
        
        Args:
            new_content: Updated content
            description: Optional description of changes
            
        Returns:
            New artifact instance with incremented version
        """
        return Artifact(
            type=self.type,
            title=self.title,
            description=description or self.description,
            content=new_content,
            metadata=self.metadata.copy(),
            version=self.version + 1,
            parent_id=self.id,
            session_id=self.session_id,
            agent_name=self.agent_name,
            tags=self.tags.copy(),
        )
    
    def get_file_extension(self) -> str:
        """Get appropriate file extension for this artifact type"""
        extension_map = {
            ArtifactType.CODE_PYTHON: "py",
            ArtifactType.CODE_JAVASCRIPT: "js",
            ArtifactType.CODE_TYPESCRIPT: "ts",
            ArtifactType.CODE_JAVA: "java",
            ArtifactType.CODE_GO: "go",
            ArtifactType.CODE_RUST: "rs",
            ArtifactType.CODE_SQL: "sql",
            ArtifactType.CODE_HTML: "html",
            ArtifactType.CODE_CSS: "css",
            ArtifactType.CODE_SHELL: "sh",
            ArtifactType.DOCUMENT_MARKDOWN: "md",
            ArtifactType.DOCUMENT_HTML: "html",
            ArtifactType.DOCUMENT_TEXT: "txt",
            ArtifactType.DOCUMENT_JSON: "json",
            ArtifactType.DOCUMENT_YAML: "yaml",
            ArtifactType.DOCUMENT_XML: "xml",
            ArtifactType.DATA_CSV: "csv",
            ArtifactType.DATA_JSON: "json",
            ArtifactType.DATA_PARQUET: "parquet",
            ArtifactType.DATA_EXCEL: "xlsx",
            ArtifactType.VIZ_MERMAID: "mmd",
            ArtifactType.IMAGE_PNG: "png",
            ArtifactType.IMAGE_JPEG: "jpg",
            ArtifactType.IMAGE_SVG: "svg",
        }
        return extension_map.get(self.type, "txt")
    
    def get_suggested_filename(self) -> str:
        """Get suggested filename for download"""
        # Sanitize title for filename
        safe_title = "".join(c if c.isalnum() or c in (' ', '-', '_') else '_' for c in self.title)
        safe_title = safe_title.replace(' ', '_').lower()
        
        extension = self.get_file_extension()
        
        if self.version > 1:
            return f"{safe_title}_v{self.version}.{extension}"
        return f"{safe_title}.{extension}"
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert artifact to dictionary"""
        return {
            "id": str(self.id),
            "type": self.type.value,
            "title": self.title,
            "description": self.description,
            "content": self.content,
            "metadata": self.metadata,
            "version": self.version,
            "parent_id": str(self.parent_id) if self.parent_id else None,
            "session_id": str(self.session_id),
            "agent_name": self.agent_name,
            "created_at": self.created_at.isoformat(),
            "tags": self.tags,
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "Artifact":
        """Create artifact from dictionary"""
        return cls(
            id=UUID(data["id"]),
            type=ArtifactType(data["type"]),
            title=data["title"],
            description=data.get("description"),
            content=data["content"],
            metadata=data.get("metadata", {}),
            version=data.get("version", 1),
            parent_id=UUID(data["parent_id"]) if data.get("parent_id") else None,
            session_id=UUID(data["session_id"]),
            agent_name=data.get("agent_name"),
            created_at=datetime.fromisoformat(data["created_at"]),
            tags=data.get("tags", []),
        )


class ArtifactManager:
    """Helper class for managing artifacts in a session"""
    
    def __init__(self):
        self.artifacts: Dict[UUID, Artifact] = {}
    
    def add(self, artifact: Artifact) -> None:
        """Add an artifact"""
        self.artifacts[artifact.id] = artifact
    
    def get(self, artifact_id: UUID) -> Optional[Artifact]:
        """Get an artifact by ID"""
        return self.artifacts.get(artifact_id)
    
    def get_by_type(self, artifact_type: ArtifactType) -> list[Artifact]:
        """Get all artifacts of a specific type"""
        return [a for a in self.artifacts.values() if a.type == artifact_type]
    
    def get_by_tag(self, tag: str) -> list[Artifact]:
        """Get all artifacts with a specific tag"""
        return [a for a in self.artifacts.values() if tag in a.tags]
    
    def get_latest_version(self, artifact_id: UUID) -> Optional[Artifact]:
        """Get the latest version of an artifact"""
        artifact = self.get(artifact_id)
        if not artifact:
            return None
        
        # Find all versions
        versions = [a for a in self.artifacts.values() 
                   if a.parent_id == artifact_id or a.id == artifact_id]
        
        if not versions:
            return artifact
        
        return max(versions, key=lambda a: a.version)
    
    def get_version_history(self, artifact_id: UUID) -> list[Artifact]:
        """Get all versions of an artifact"""
        versions = [a for a in self.artifacts.values() 
                   if a.parent_id == artifact_id or a.id == artifact_id]
        return sorted(versions, key=lambda a: a.version)
    
    def list_all(self) -> list[Artifact]:
        """List all artifacts"""
        return list(self.artifacts.values())
    
    def count(self) -> int:
        """Get total number of artifacts"""
        return len(self.artifacts)

